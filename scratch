**SCSS FIXED HEADER**

.tableFixHead {
  overflow-y: auto;
  height: 100px;
}

.tableFixHead thead th {
  position: sticky;
  top: 0;
}

.tableFixHead table {
  border-collapse: collapse;
  width: 100%;
}

.tableFixHead th,
td {
  padding: 8px 16px;
}

.tableFixHead th {
  background: #eee;
}

.custom-icon {
  float: right;
}

**SAMPLE TABLE**

const Table1 = () => (
    <div className="tableFixHead">
      <table className="table is-fullwidth">
        <thead>
          <tr>
            <th>
              <span>GitHub</span>
              <span className="icon custom-icon">
                <i className="fab fa-github" />
              </span>
            </th>
            <th>
              <span>GitHub 2</span>
              <span className="icon custom-icon">
                <i className="fab fa-github" />
              </span>{" "}
            </th>
            <th>
              <p>Actions 3</p>
            </th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>A1</td>
            <td>A2</td>
            <td>A2</td>
          </tr>
          <tr>
            <td>B1</td>
            <td>B2</td>
            <td>B3</td>
          </tr>
          <tr>
            <td>C1</td>
            <td>C2</td>
            <td>C3</td>
          </tr>
          <tr>
            <td>D1</td>
            <td>D2</td>
            <td>D3</td>
          </tr>
          <tr>
            <td>E1</td>
            <td>E2</td>
            <td>E3</td>
          </tr>
        </tbody>
      </table>
    </div>
);

// Custom Collapsible Table:

import React from "react";

const FuncionalCollapsibleTable = () => {
  const [expandedRows, setExpandedRows] = React.useState([]);

  const data = [
    {
      id: 1,
      date: "2014-04-18",
      total: 121.0,
      status: "Shipped",
      Rows: [{ name: "A", points: 5, percent: 50 }]
    },
    {
      id: 2,
      date: "2014-04-21",
      total: 121.0,
      status: "Not Shipped",
      Rows: [{ name: "B", points: 10, percent: 60 }]
    },
    {
      id: 3,
      date: "2014-08-09",
      total: 121.0,
      status: "Not Shipped",
      Rows: [{ name: "C", points: 15, percent: 70 }]
    },
    {
      id: 4,
      date: "2014-04-24",
      total: 121.0,
      status: "Shipped",
      Rows: [{ name: "D", points: 20, percent: 80 }]
    },
    {
      id: 5,
      date: "2014-04-26",
      total: 121.0,
      status: "Shipped",
      Rows: [{ name: "E", points: 25, percent: 90 }]
    }
  ];

  const handleRowClick = rowId => {
    const currentExpandedRows = expandedRows;
    const isRowCurrentlyExpanded = currentExpandedRows.includes(rowId);

    const newExpandedRows = isRowCurrentlyExpanded
      ? currentExpandedRows.filter(id => id !== rowId)
      : currentExpandedRows.concat(rowId);

    return setExpandedRows(newExpandedRows);
  };

  const renderItem = item => {
    const clickCallback = () => handleRowClick(item.id);
    const itemRows = [
      <tr key={"row-data-" + item.id}>
        <td>{item.date}</td>
        <td>{item.total}</td>
        <td>{item.status}</td>
        <td onClick={clickCallback}>Expand </td>
      </tr>
    ];

    if (expandedRows.includes(item.id)) {
      itemRows.push(
        <tr key={"row-expanded-" + item.id}>
          {item.Rows.map(x => (
            <td>
              <div>{x.name}</div>
              <div>{x.points}</div>
              <div>{x.percent}</div>
            </td>
          ))}
        </tr>
      );
    }

    return itemRows;
  };

  let allItemRows = [];
  data.forEach(item => {
    const perItemRows = renderItem(item);
    allItemRows = allItemRows.concat(perItemRows);
  });

  return (
    <table className="table is-striped is-fullwidth">
      <thead>
        <tr>
          <th>Header 1</th>
          <th>Header 2</th>
          <th>Header 3</th>
          <th>Header 4</th>
        </tr>
        {allItemRows}
      </thead>
    </table>
  );
};

export default FuncionalCollapsibleTable;
